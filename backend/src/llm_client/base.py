import abc
from pydantic import BaseModel, Field
import aisuite
from typing import Optional

class MessagePassingInterface(BaseModel):
    system_content: str = Field(...)
    user_content: str = Field(...)
    
    @property
    def to_dict(self) -> list[dict[str, str]]:
        dicts = [
            {"role": "system", "content": f"{self.system_content}"},
            {"role": "user", "content": f"{self.user_content}"}
        ]
        return dicts

class LLMClientBase(metaclass=abc.ABCMeta):
    client: aisuite.Client = ...
    
    @abc.abstractmethod
    def _generate_text(self, prompt: MessagePassingInterface) -> str:
        """
        Generate the response based on the prompt.

        This method should be implemented by subclasses to interact with the 
        language model and generate a response based on the provided prompt.

        :param prompt: An instance of MessagePassingInterface containing the 
                       system and user content to be sent to the language model.
        :type prompt: MessagePassingInterface
        :return: The response generated by the language model.
        """
        return NotImplemented
    
    @abc.abstractmethod
    def extract_search(self, prompt_text: str) -> str:
        raise NotImplementedError

    @abc.abstractmethod
    def generate_summary(self, prompt_text: str) -> Optional[dict[str, str]]:
        raise NotImplementedError

    @abc.abstractmethod
    def evaluate_relevance(self, prompt_text: str) -> Optional[str]:
        raise NotImplementedError